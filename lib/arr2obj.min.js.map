{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///arr2obj.min.js","webpack:///webpack/bootstrap 64cabdea836b625098f5","webpack:///./src/index.js","webpack:///./src/util/is-array.js","webpack:///./src/util/is-plain-object.js","webpack:///./src/util/is-string.js","webpack:///./src/util/extend.js","webpack:///./src/util/is-function.js","webpack:///./src/util/is-boolean.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","arr2obj","array","options","_isArray2","TypeError","defaults","key","keyPrefix","keySuffix","deleteKey","inheritProto","settings","_isPlainObject2","_extend2","_isString2","converted","reduce","accum","current","index","Object","create","defineProperty","value","_isArray","_isPlainObject","_isString","_extend","isArray","Array","prototype","toString","isPlainObject","hasOwn","hasOwnProperty","proto","getPrototypeOf","ctor","constructor","isString","extend","length","arguments","name","src","copy","copyIsArray","clone","target","undefined","i","deep","_isBoolean2","_typeof","_isFunction2","Symbol","iterator","_isFunction","_isBoolean","isFunction","isBoolean"],"mappings":"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","file":"arr2obj.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"arr2obj\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"arr2obj\"] = factory();\n\telse\n\t\troot[\"arr2obj\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * arr2obj - Convert an array to plain object\n * \n * @version v1.0.0\n * @author George Raptis <georapbox@gmail.com> (georapbox.github.io)\n * @homepage https://github.com/georapbox/arr2obj#readme\n * @repository git+https://github.com/georapbox/arr2obj.git\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"arr2obj\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"arr2obj\"] = factory();\n\telse\n\t\troot[\"arr2obj\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _isArray = __webpack_require__(1);\n\t\n\tvar _isArray2 = _interopRequireDefault(_isArray);\n\t\n\tvar _isPlainObject = __webpack_require__(2);\n\t\n\tvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\t\n\tvar _isString = __webpack_require__(3);\n\t\n\tvar _isString2 = _interopRequireDefault(_isString);\n\t\n\tvar _extend = __webpack_require__(4);\n\t\n\tvar _extend2 = _interopRequireDefault(_extend);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * Converts an array of primitives or objects to a plain object.\n\t *\n\t * @param {Array} array The initial array to convert.\n\t * @param {Object} [options] User defined options to override defaults.\n\t * @param {String} [options.key] If `array` is an array of objects and each object has a property with the value of `key`, use those as the properties of the result object. By default the index of each item in array is used.\n\t * @param {String} [options.keyPrefix=''] A string that prefixes the keys of the result object. If anything than string is provided, it takes the default value ('').\n\t * @param {String} [options.keySuffix=''] A string that suffixes the keys of the result object. If anything than string is provided, it takes the default value ('').\n\t * @param {Boolean} [options.deleteKey=false] Deletes the property of each item of the result object if `key` is specified and exists in current object. If `key` does not exist in current item or current item is not an object, leaves the property as is.\n\t * @param {Boolean} [options.inheritProto=false] Determines if the result object should inherit from the `Object.prototype`.\n\t * @throws {TypeError} Will throw if `array` is not an Array.\n\t * @return {Object} The converted object.\n\t */\n\tfunction arr2obj(array, options) {\n\t  if (!(0, _isArray2.default)(array)) {\n\t    throw new TypeError('arr2obj must be called on an Array');\n\t  }\n\t\n\t  /**\n\t   * Dictionary of default options\n\t   * @private\n\t   * @type {Object}\n\t   */\n\t  var defaults = {\n\t    key: null,\n\t    keyPrefix: '',\n\t    keySuffix: '',\n\t    deleteKey: false,\n\t    inheritProto: false\n\t  };\n\t\n\t  /**\n\t   * Copy of default and user options\n\t   * @private\n\t   * @type {Object}\n\t   */\n\t  var settings = (0, _isPlainObject2.default)(options) ? (0, _extend2.default)({}, defaults, options) : (0, _extend2.default)({}, defaults);\n\t\n\t  // Extract data from `settings` into dinstict variables.\n\t  var key = settings.key,\n\t      keyPrefix = settings.keyPrefix,\n\t      keySuffix = settings.keySuffix,\n\t      deleteKey = settings.deleteKey,\n\t      inheritProto = settings.inheritProto;\n\t\n\t  // Failsafe if `keyPrefix` or `keySuffix` are not strings.\n\t\n\t  keyPrefix = (0, _isString2.default)(keyPrefix) ? keyPrefix : '';\n\t  keySuffix = (0, _isString2.default)(keySuffix) ? keySuffix : '';\n\t\n\t  /**\n\t   * The converted result object\n\t   * @private\n\t   * @type {Object}\n\t   */\n\t  var converted = array.reduce(function (accum, current, index) {\n\t    if (!key || !current[key]) {\n\t      accum[keyPrefix + index + keySuffix] = current;\n\t    } else {\n\t      accum[keyPrefix + current[key] + keySuffix] = current;\n\t    }\n\t\n\t    if (deleteKey && key && (0, _isPlainObject2.default)(current)) {\n\t      delete current[key];\n\t    }\n\t\n\t    return accum;\n\t  }, inheritProto ? {} : Object.create(null));\n\t\n\t  return converted;\n\t}\n\t\n\texports.default = arr2obj;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = isArray;\n\t/**\n\t * Checks if 'value' is array.\n\t *\n\t * @param {*} value The value to check if is array.\n\t * @return {Boolean} True if array, else false.\n\t * @example\n\t *\n\t * isArray(['a', 'b', 'c', 'd']);\n\t * // -> true\n\t *\n\t * isArray(100);\n\t * // -> false\n\t *\n\t * isArray('Lorem ipsum dolor sit amet');\n\t * // -> false\n\t *\n\t * isArray({ a: 'a', b: 'b' });\n\t * // -> false\n\t */\n\tfunction isArray(value) {\n\t  return Array.isArray ? Array.isArray(value) : Object.prototype.toString.call(value) === '[object Array]';\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = isPlainObject;\n\t/**\n\t * Checks if `value` is a plain object (created using \"{}\" or \"new Object\").\n\t *\n\t * @NOTE Use with caution as host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform.\n\t * @param {*} value The value to check.\n\t * @return {Boolean} True if `value` is a plain object, else false.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t * }\n\t *\n\t * isPlainObject({});\n\t * // -> true\n\t *\n\t * isPlainObject({foo: 'bar'});\n\t * // -> true\n\t *\n\t * isPlainObject(new Object({foo: 'bar'}));\n\t * // -> true\n\t *\n\t * isPlainObject(new Foo());\n\t * // -> false\n\t *\n\t * isPlainObject(Object.create(null));\n\t * // -> true\n\t *\n\t * isPlainObject(Object.create({}));\n\t * // -> false\n\t *\n\t * isPlainObject(Object.create({foo: 'bar'}));\n\t * // -> false\n\t *\n\t * isPlainObject([1, 2, 3]);\n\t * // -> false\n\t *\n\t * isPlainObject(null);\n\t * // -> false\n\t *\n\t * isPlainObject();\n\t * // -> false\n\t *\n\t * isPlainObject(100);\n\t * // -> false\n\t *\n\t * isPlainObject('lorem ipsum');\n\t * // -> false\n\t */\n\t\n\tfunction isPlainObject(value) {\n\t  var hasOwn = {}.hasOwnProperty;\n\t  var toString = {}.toString;\n\t\n\t  // Detect obvious negatives.\n\t  // Use toString to catch host objects.\n\t  if (!value || toString.call(value) !== '[object Object]') {\n\t    return false;\n\t  }\n\t\n\t  var proto = Object.getPrototypeOf(value);\n\t\n\t  // Objects with no prototype (e.g., `Object.create(null)`) are plain.\n\t  if (!proto) {\n\t    return true;\n\t  }\n\t\n\t  // Objects with prototype are plain if they were constructed by a global Object function.\n\t  var ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n\t  return typeof ctor === 'function' && hasOwn.toString.call(ctor) === hasOwn.toString.call(Object);\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = isString;\n\t/**\n\t * Checks if `value` is string.\n\t *\n\t * @param {*} value The value to check if is string.\n\t * @return {Boolean} True if string, else false.\n\t * @example\n\t *\n\t * isString(['a', 'b', 'c', 'd']);\n\t * // -> false\n\t *\n\t * isString(100);\n\t * // -> false\n\t *\n\t * isString('Lorem ipsum dolor sit amet');\n\t * // -> true\n\t *\n\t * isString({ a: 'a', b: 'b' });\n\t * // -> false\n\t */\n\tfunction isString(value) {\n\t  return !!value && Object.prototype.toString.call(value) === '[object String]';\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\texports.default = extend;\n\t\n\tvar _isPlainObject = __webpack_require__(2);\n\t\n\tvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\t\n\tvar _isArray = __webpack_require__(1);\n\t\n\tvar _isArray2 = _interopRequireDefault(_isArray);\n\t\n\tvar _isFunction = __webpack_require__(5);\n\t\n\tvar _isFunction2 = _interopRequireDefault(_isFunction);\n\t\n\tvar _isBoolean = __webpack_require__(6);\n\t\n\tvar _isBoolean2 = _interopRequireDefault(_isBoolean);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * Merge the contents of two or more objects together into the first object.\n\t *\n\t * Keep in mind that the target object (first argument) will be modified, and will also be returned from `extend()`.\n\t * If, however, you want to preserve both of the original objects, you can do so by passing an empty object as the target:\n\t *\n\t * `var object = extend({}, object1, object2);`\n\t *\n\t * The merge performed by `extend()` is not recursive by default; if a property of the first object\n\t * is itself an object or array, it will be completely overwritten by a property with the same key\n\t * in the second or subsequent object. The values are not merged.\n\t * However, by passing true for the first function argument, objects will be recursively merged.\n\t *\n\t * **Warning:** Passing false for the first argument is not supported.\n\t *\n\t * Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over.\n\t * Properties that are an object constructed via new MyCustomObject(args), or built-in JavaScript types such as\n\t * Date or RegExp, are not re-constructed and will appear as plain Objects in the resulting object or array.\n\t *\n\t * On a deep extend, Object and Array are extended, but object wrappers on primitive types such as\n\t * String, Boolean, and Number are not. Deep-extending a cyclical data structure will result in an error.\n\t *\n\t * @function extend\n\t * @param {Boolean} [deep=false] If true, the merge becomes recursive (aka. deep copy).\n\t * @param {Object} target An object that will receive the new properties if additional objects are passed.\n\t * @param {Object} object1 An object containing additional properties to merge in.\n\t * @param {Object} [objectN] Additional objects containing properties to merge in.\n\t * @return {Object} The merged object.\n\t * @example\n\t *\n\t * // EXAMPLE 1\n\t * // Merge two objects, modifying the first.\n\t * var object1 = {\n\t *   apple: 0,\n\t *   banana: {weight: 52, price: 100},\n\t *   cherry: 97\n\t * };\n\t *\n\t * var object2 = {\n\t *   banana: {price: 200},\n\t *   durian: 100\n\t * };\n\t *\n\t * extend(object1, object2);\n\t * // -> {\"apple\": 0, \"banana\": {\"price\": 200}, \"cherry\": 97, \"durian\": 100}\n\t *\n\t * // EXAMPLE 2\n\t * // Merge two objects recursively, modifying the first.\n\t * var object1 = {\n\t *   apple: 0,\n\t *   banana: {weight: 52, price: 100},\n\t *   cherry: 97\n\t * };\n\t * var object2 = {\n\t *   banana: {price: 200},\n\t *   durian: 100\n\t * };\n\t *\n\t * extend(true, object1, object2);\n\t * // -> {\"apple\": 0, \"banana\": {\"weight\": 52, \"price\": 200}, \"cherry\": 97, \"durian\": 100}\n\t *\n\t * // EXAMPLE 3\n\t * // Merge defaults and options, without modifying the defaults.\n\t * var defaults = {validate: false, limit: 5, name: \"foo\"};\n\t * var options = {validate: true, name: \"bar\"};\n\t *\n\t * // Merge defaults and options, without modifying defaults\n\t * var settings = extend({}, defaults, options);\n\t *\n\t * // -> defaults -- {\"validate\": false, \"limit\": 5, \"name\": \"foo\"}\n\t * // -> options -- {\"validate\": true, \"name\": \"bar\"}\n\t * // -> settings -- {\"validate\": true, \"limit\": 5, \"name\": \"bar\"}\n\t */\n\tfunction extend() {\n\t  var length = arguments.length;\n\t  var options = void 0,\n\t      name = void 0,\n\t      src = void 0,\n\t      copy = void 0,\n\t      copyIsArray = void 0,\n\t      clone = void 0;\n\t  var target = (arguments.length <= 0 ? undefined : arguments[0]) || {};\n\t  var i = 1;\n\t  var deep = false;\n\t\n\t  // Handle a deep copy situation\n\t  if ((0, _isBoolean2.default)(target)) {\n\t    deep = target;\n\t    target = (arguments.length <= 1 ? undefined : arguments[1]) || {};\n\t    // skip the boolean and the target\n\t    i = 2;\n\t  }\n\t\n\t  // Handle case when target is a string or something (possible in deep copy)\n\t  if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && !(0, _isFunction2.default)(target)) {\n\t    target = {};\n\t  }\n\t\n\t  for (; i < length; i += 1) {\n\t    // Only deal with non-null/undefined values\n\t    if ((options = arguments.length <= i ? undefined : arguments[i]) != null) {\n\t      // Extend the base object\n\t      for (name in options) {\n\t        src = target[name];\n\t        copy = options[name];\n\t\n\t        // Prevent never-ending loop\n\t        if (target === copy) {\n\t          continue;\n\t        }\n\t\n\t        // Recurse if we're merging plain objects or arrays\n\t        if (deep && copy && ((0, _isPlainObject2.default)(copy) || (copyIsArray = (0, _isArray2.default)(copy)))) {\n\t          if (copyIsArray) {\n\t            copyIsArray = false;\n\t            clone = src && (0, _isArray2.default)(src) ? src : [];\n\t          } else {\n\t            clone = src && (0, _isPlainObject2.default)(src) ? src : {};\n\t          }\n\t\n\t          // Never move original objects, clone them\n\t          target[name] = extend(deep, clone, copy);\n\t\n\t          // Don't bring in undefined values\n\t        } else if (typeof copy !== 'undefined') {\n\t          target[name] = copy;\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  // Return the modified object\n\t  return target;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = isFunction;\n\t/**\n\t * Checks if 'value' is a function.\n\t *\n\t * @param {*} value The value to check.\n\t * @return {Boolean} True if 'value' is a function, else returns false.\n\t * @example\n\t *\n\t * isFunction(function test() {\n\t *   return 'This is test function.';\n\t * });\n\t * // -> true\n\t *\n\t * isFunction('This is a test function.');\n\t * // -> false\n\t */\n\tfunction isFunction(value) {\n\t  return typeof value === 'function' && Object.prototype.toString.call(value) === '[object Function]';\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = isBoolean;\n\t/**\n\t * Checks if 'value' is a boolean value.\n\t *\n\t * @param {*} value The value to check.\n\t * @return {Boolean} True if the 'value' is a boolean value, else false.\n\t * @example\n\t *\n\t * isBoolean(true);\n\t * // -> true\n\t *\n\t * isBoolean(false);\n\t * // -> true\n\t *\n\t * isBoolean({a: 'a'});\n\t * // -> false\n\t *\n\t * isBoolean(null);\n\t * // -> false\n\t */\n\tfunction isBoolean(value) {\n\t  return value === true || value === false || Object.prototype.toString.call(value) === '[object Boolean]';\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// arr2obj.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 64cabdea836b625098f5","import isArray from './util/is-array';\nimport isPlainObject from './util/is-plain-object';\nimport isString from './util/is-string';\nimport extend from './util/extend';\n\n/**\n * Converts an array of primitives or objects to a plain object.\n *\n * @param {Array} array The initial array to convert.\n * @param {Object} [options] User defined options to override defaults.\n * @param {String} [options.key] If `array` is an array of objects and each object has a property with the value of `key`, use those as the properties of the result object. By default the index of each item in array is used.\n * @param {String} [options.keyPrefix=''] A string that prefixes the keys of the result object. If anything than string is provided, it takes the default value ('').\n * @param {String} [options.keySuffix=''] A string that suffixes the keys of the result object. If anything than string is provided, it takes the default value ('').\n * @param {Boolean} [options.deleteKey=false] Deletes the property of each item of the result object if `key` is specified and exists in current object. If `key` does not exist in current item or current item is not an object, leaves the property as is.\n * @param {Boolean} [options.inheritProto=false] Determines if the result object should inherit from the `Object.prototype`.\n * @throws {TypeError} Will throw if `array` is not an Array.\n * @return {Object} The converted object.\n */\nfunction arr2obj(array, options) {\n  if (!isArray(array)) {\n    throw new TypeError('arr2obj must be called on an Array');\n  }\n\n  /**\n   * Dictionary of default options\n   * @private\n   * @type {Object}\n   */\n  const defaults = {\n    key: null,\n    keyPrefix: '',\n    keySuffix: '',\n    deleteKey: false,\n    inheritProto: false\n  };\n\n  /**\n   * Copy of default and user options\n   * @private\n   * @type {Object}\n   */\n  const settings = isPlainObject(options) ? extend({}, defaults, options) : extend({}, defaults);\n\n  // Extract data from `settings` into dinstict variables.\n  let {key, keyPrefix, keySuffix, deleteKey, inheritProto} = settings;\n\n  // Failsafe if `keyPrefix` or `keySuffix` are not strings.\n  keyPrefix = isString(keyPrefix) ? keyPrefix : '';\n  keySuffix = isString(keySuffix) ? keySuffix : '';\n\n  /**\n   * The converted result object\n   * @private\n   * @type {Object}\n   */\n  const converted = array.reduce(function (accum, current, index) {\n    if (!key || !current[key]) {\n      accum[keyPrefix + index + keySuffix] = current;\n    } else {\n      accum[keyPrefix + current[key] + keySuffix] = current;\n    }\n\n    if (deleteKey && key && isPlainObject(current)) {\n      delete current[key];\n    }\n\n    return accum;\n  }, inheritProto ? {} : Object.create(null));\n\n  return converted;\n}\n\nexport default arr2obj;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Checks if 'value' is array.\n *\n * @param {*} value The value to check if is array.\n * @return {Boolean} True if array, else false.\n * @example\n *\n * isArray(['a', 'b', 'c', 'd']);\n * // -> true\n *\n * isArray(100);\n * // -> false\n *\n * isArray('Lorem ipsum dolor sit amet');\n * // -> false\n *\n * isArray({ a: 'a', b: 'b' });\n * // -> false\n */\nexport default function isArray(value) {\n  return Array.isArray\n    ? Array.isArray(value)\n    : Object.prototype.toString.call(value) === '[object Array]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-array.js","/**\n * Checks if `value` is a plain object (created using \"{}\" or \"new Object\").\n *\n * @NOTE Use with caution as host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform.\n * @param {*} value The value to check.\n * @return {Boolean} True if `value` is a plain object, else false.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * isPlainObject({});\n * // -> true\n *\n * isPlainObject({foo: 'bar'});\n * // -> true\n *\n * isPlainObject(new Object({foo: 'bar'}));\n * // -> true\n *\n * isPlainObject(new Foo());\n * // -> false\n *\n * isPlainObject(Object.create(null));\n * // -> true\n *\n * isPlainObject(Object.create({}));\n * // -> false\n *\n * isPlainObject(Object.create({foo: 'bar'}));\n * // -> false\n *\n * isPlainObject([1, 2, 3]);\n * // -> false\n *\n * isPlainObject(null);\n * // -> false\n *\n * isPlainObject();\n * // -> false\n *\n * isPlainObject(100);\n * // -> false\n *\n * isPlainObject('lorem ipsum');\n * // -> false\n */\n\nexport default function isPlainObject(value) {\n  const hasOwn = {}.hasOwnProperty;\n  const toString = {}.toString;\n\n  // Detect obvious negatives.\n  // Use toString to catch host objects.\n  if (!value || toString.call(value) !== '[object Object]') {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n\n  // Objects with no prototype (e.g., `Object.create(null)`) are plain.\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with prototype are plain if they were constructed by a global Object function.\n  const ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof ctor === 'function' && hasOwn.toString.call(ctor) === hasOwn.toString.call(Object);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-plain-object.js","/**\n * Checks if `value` is string.\n *\n * @param {*} value The value to check if is string.\n * @return {Boolean} True if string, else false.\n * @example\n *\n * isString(['a', 'b', 'c', 'd']);\n * // -> false\n *\n * isString(100);\n * // -> false\n *\n * isString('Lorem ipsum dolor sit amet');\n * // -> true\n *\n * isString({ a: 'a', b: 'b' });\n * // -> false\n */\nexport default function isString(value) {\n  return !!value && Object.prototype.toString.call(value) === '[object String]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-string.js","import isPlainObject from './is-plain-object';\nimport isArray from './is-array';\nimport isFunction from './is-function';\nimport isBoolean from './is-boolean';\n\n/**\n * Merge the contents of two or more objects together into the first object.\n *\n * Keep in mind that the target object (first argument) will be modified, and will also be returned from `extend()`.\n * If, however, you want to preserve both of the original objects, you can do so by passing an empty object as the target:\n *\n * `var object = extend({}, object1, object2);`\n *\n * The merge performed by `extend()` is not recursive by default; if a property of the first object\n * is itself an object or array, it will be completely overwritten by a property with the same key\n * in the second or subsequent object. The values are not merged.\n * However, by passing true for the first function argument, objects will be recursively merged.\n *\n * **Warning:** Passing false for the first argument is not supported.\n *\n * Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over.\n * Properties that are an object constructed via new MyCustomObject(args), or built-in JavaScript types such as\n * Date or RegExp, are not re-constructed and will appear as plain Objects in the resulting object or array.\n *\n * On a deep extend, Object and Array are extended, but object wrappers on primitive types such as\n * String, Boolean, and Number are not. Deep-extending a cyclical data structure will result in an error.\n *\n * @function extend\n * @param {Boolean} [deep=false] If true, the merge becomes recursive (aka. deep copy).\n * @param {Object} target An object that will receive the new properties if additional objects are passed.\n * @param {Object} object1 An object containing additional properties to merge in.\n * @param {Object} [objectN] Additional objects containing properties to merge in.\n * @return {Object} The merged object.\n * @example\n *\n * // EXAMPLE 1\n * // Merge two objects, modifying the first.\n * var object1 = {\n *   apple: 0,\n *   banana: {weight: 52, price: 100},\n *   cherry: 97\n * };\n *\n * var object2 = {\n *   banana: {price: 200},\n *   durian: 100\n * };\n *\n * extend(object1, object2);\n * // -> {\"apple\": 0, \"banana\": {\"price\": 200}, \"cherry\": 97, \"durian\": 100}\n *\n * // EXAMPLE 2\n * // Merge two objects recursively, modifying the first.\n * var object1 = {\n *   apple: 0,\n *   banana: {weight: 52, price: 100},\n *   cherry: 97\n * };\n * var object2 = {\n *   banana: {price: 200},\n *   durian: 100\n * };\n *\n * extend(true, object1, object2);\n * // -> {\"apple\": 0, \"banana\": {\"weight\": 52, \"price\": 200}, \"cherry\": 97, \"durian\": 100}\n *\n * // EXAMPLE 3\n * // Merge defaults and options, without modifying the defaults.\n * var defaults = {validate: false, limit: 5, name: \"foo\"};\n * var options = {validate: true, name: \"bar\"};\n *\n * // Merge defaults and options, without modifying defaults\n * var settings = extend({}, defaults, options);\n *\n * // -> defaults -- {\"validate\": false, \"limit\": 5, \"name\": \"foo\"}\n * // -> options -- {\"validate\": true, \"name\": \"bar\"}\n * // -> settings -- {\"validate\": true, \"limit\": 5, \"name\": \"bar\"}\n */\nexport default function extend(...args) {\n  const length = args.length;\n  let options, name, src, copy, copyIsArray, clone;\n  let target = args[0] || {};\n  let i = 1;\n  let deep = false;\n\n  // Handle a deep copy situation\n  if (isBoolean(target)) {\n    deep = target;\n    target = args[1] || {};\n    // skip the boolean and the target\n    i = 2;\n  }\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if (typeof target !== 'object' && !isFunction(target)) {\n    target = {};\n  }\n\n  for (; i < length; i += 1) {\n    // Only deal with non-null/undefined values\n    if ((options = args[i]) != null) {\n      // Extend the base object\n      for (name in options) {\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        if (target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && isArray(src) ? src : [];\n          } else {\n            clone = src && isPlainObject(src) ? src : {};\n          }\n\n          // Never move original objects, clone them\n          target[name] = extend(deep, clone, copy);\n\n        // Don't bring in undefined values\n        } else if (typeof copy !== 'undefined') {\n          target[name] = copy;\n        }\n      }\n    }\n  }\n\n  // Return the modified object\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/extend.js","/**\n * Checks if 'value' is a function.\n *\n * @param {*} value The value to check.\n * @return {Boolean} True if 'value' is a function, else returns false.\n * @example\n *\n * isFunction(function test() {\n *   return 'This is test function.';\n * });\n * // -> true\n *\n * isFunction('This is a test function.');\n * // -> false\n */\nexport default function isFunction(value) {\n  return typeof value === 'function' && Object.prototype.toString.call(value) === '[object Function]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-function.js","/**\n * Checks if 'value' is a boolean value.\n *\n * @param {*} value The value to check.\n * @return {Boolean} True if the 'value' is a boolean value, else false.\n * @example\n *\n * isBoolean(true);\n * // -> true\n *\n * isBoolean(false);\n * // -> true\n *\n * isBoolean({a: 'a'});\n * // -> false\n *\n * isBoolean(null);\n * // -> false\n */\nexport default function isBoolean(value) {\n  return value === true || value === false ||\n    Object.prototype.toString.call(value) === '[object Boolean]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-boolean.js"],"sourceRoot":""}