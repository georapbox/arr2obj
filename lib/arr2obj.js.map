{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1be738edce2bbd3a297e","webpack:///./src/index.js","webpack:///./src/util/is-array.js","webpack:///./src/util/is-plain-object.js","webpack:///./src/util/is-string.js","webpack:///./src/util/extend.js","webpack:///./src/util/is-function.js","webpack:///./src/util/is-boolean.js"],"names":["arr2obj","array","options","TypeError","defaults","key","keyPrefix","keySuffix","deleteKey","inheritProto","settings","converted","reduce","accum","current","index","Object","create","isArray","value","Array","prototype","toString","call","isPlainObject","hasOwn","hasOwnProperty","proto","getPrototypeOf","ctor","constructor","isString","extend","length","name","src","copy","copyIsArray","clone","target","i","deep","isFunction","isBoolean"],"mappings":"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","file":"arr2obj.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"arr2obj\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"arr2obj\"] = factory();\n\telse\n\t\troot[\"arr2obj\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1be738edce2bbd3a297e","import isArray from './util/is-array';\nimport isPlainObject from './util/is-plain-object';\nimport isString from './util/is-string';\nimport extend from './util/extend';\n\n/**\n * Converts an array of primitives or objects to a plain object.\n *\n * @param {Array} array The initial array to convert.\n * @param {Object} [options] User defined options to override defaults.\n * @param {String} [options.key] If `array` is an array of objects and each object has a property with the value of `key`, use those as the properties of the result object. By default the index of each object in array is used.\n * @param {String} [options.keyPrefix=''] A string that prefixes the values of the specified `key`. If anything than string is provided, it takes the default value ('').\n * @param {String} [options.keySuffix=''] A string that suffixes the values of the specified `key`. If anything than string is provided, it takes the default value ('').\n * @param {Boolean} [options.deleteKey=false] If `key` is specified and `options.deleteKey` is true, delete the property from the result object.\n * @param {Boolean} [options.inheritProto=false] Determines if the result object should inherit from the `Object.prototype`.\n * @throws {TypeError} Will throw if `array` is not an Array.\n * @return {Object} The converted object.\n * @example\n *\n * const arr1 = [\n *   {_id: 'u0', name: 'John Doe', job: 'Frontend Developer'},\n *   {_id: 'u1', name: 'Albert Brown', job: 'Designer'},\n *   {_id: 'u2', name: 'Stuart Chalmers', job: 'Product Manager'},\n *   {_id: 'u3', name: 'Alberta Jonson', job: 'Account Manager'}\n * ];\n *\n * const arr2 = ['orange', 'banana', 'apple', 'cherry'];\n *\n * // Convert an array of objects using the \"_id\" property as key of the result object, prefixed with \"$\" character.\n * arr2obj(arr1, {\n *   key: '_id',\n *   keyPrefix: '$'\n * });\n * // ->\n * {\n *   '$u0': { _id: 'u0', name: 'John Doe', job: 'Frontend Developer' },\n *   '$u1': { _id: 'u1', name: 'Albert Brown', job: 'Designer' },\n *   '$u2': { _id: 'u2', name: 'Stuart Chalmers', job: 'Product Manager' },\n *   '$u3': { _id: 'u3', name: 'Alberta Jonson', job: 'Account Manager' }\n * }\n *\n * // Convert an array of objects using the \"_id\" property as key of the result object, and delete it from the result object.\n * arr2obj(arr1, {\n *   key: '_id',\n *   deleteKey: true\n * });\n * // ->\n * {\n *   'u0': { name: 'John Doe', job: 'Frontend Developer' },\n *   'u1': { name: 'Albert Brown', job: 'Designer' },\n *   'u2': { name: 'Stuart Chalmers', job: 'Product Manager' },\n *   'u3': { name: 'Alberta Jonson', job: 'Account Manager' }\n * }\n *\n * // Convert an array of strings with default options.\n * arr2obj(arr2);\n * // -> { '0': 'orange', '1': 'banana', '2': 'apple', '3': 'cherry' }\n *\n * // Convert an array of strings prefixing and suffixing the keys with \"_\" character.\n * arr2obj(arr2, {\n *   keyPrefix: '_',\n *   keySuffix: '_'\n * });\n * // -> { '_0_': 'orange', '_1_': 'banana', '_2_': 'apple', '_3_': 'cherry' }\n */\nfunction arr2obj(array, options) {\n  if (!isArray(array)) {\n    throw new TypeError('arr2obj must be called on an Array');\n  }\n\n  /**\n   * Dictionary of default options\n   * @type {Object}\n   */\n  const defaults = {\n    key: null,\n    keyPrefix: '',\n    keySuffix: '',\n    deleteKey: false,\n    inheritProto: false\n  };\n\n  /**\n   * Copy of default and user options\n   * @type {Object}\n   */\n  const settings = isPlainObject(options) ? extend({}, defaults, options) : extend({}, defaults);\n\n  // Extract data from `settings` into dinstict variables.\n  let {key, keyPrefix, keySuffix, deleteKey, inheritProto} = settings;\n\n  // Failsafe if `keyPrefix` or `keySuffix` are not strings.\n  keyPrefix = isString(keyPrefix) ? keyPrefix : '';\n  keySuffix = isString(keySuffix) ? keySuffix : '';\n\n  /**\n   * The converted result object\n   * @type {Object}\n   */\n  const converted = array.reduce(function (accum, current, index) {\n    if (!key || !current[key]) {\n      accum[keyPrefix + index + keySuffix] = current;\n    } else {\n      accum[keyPrefix + current[key] + keySuffix] = current;\n    }\n\n    if (key && deleteKey) {\n      delete current[key];\n    }\n\n    return accum;\n  }, inheritProto ? {} : Object.create(null));\n\n  return converted;\n}\n\nexport default arr2obj;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Checks if 'value' is array.\n *\n * @param {*} value The value to check if is array.\n * @return {Boolean} True if array, else false.\n * @example\n *\n * isArray(['a', 'b', 'c', 'd']);\n * // -> true\n *\n * isArray(100);\n * // -> false\n *\n * isArray('Lorem ipsum dolor sit amet');\n * // -> false\n *\n * isArray({ a: 'a', b: 'b' });\n * // -> false\n */\nexport default function isArray(value) {\n  return Array.isArray\n    ? Array.isArray(value)\n    : Object.prototype.toString.call(value) === '[object Array]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-array.js","/**\n * Checks if `value` is a plain object (created using \"{}\" or \"new Object\").\n *\n * @NOTE Use with caution as host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform.\n * @param {*} value The value to check.\n * @return {Boolean} True if `value` is a plain object, else false.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * isPlainObject({});\n * // -> true\n *\n * isPlainObject({foo: 'bar'});\n * // -> true\n *\n * isPlainObject(new Object({foo: 'bar'}));\n * // -> true\n *\n * isPlainObject(new Foo());\n * // -> false\n *\n * isPlainObject(Object.create(null));\n * // -> true\n *\n * isPlainObject(Object.create({}));\n * // -> false\n *\n * isPlainObject(Object.create({foo: 'bar'}));\n * // -> false\n *\n * isPlainObject([1, 2, 3]);\n * // -> false\n *\n * isPlainObject(null);\n * // -> false\n *\n * isPlainObject();\n * // -> false\n *\n * isPlainObject(100);\n * // -> false\n *\n * isPlainObject('lorem ipsum');\n * // -> false\n */\n\nexport default function isPlainObject(value) {\n  const hasOwn = {}.hasOwnProperty;\n  const toString = {}.toString;\n\n  // Detect obvious negatives.\n  // Use toString to catch host objects.\n  if (!value || toString.call(value) !== '[object Object]') {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n\n  // Objects with no prototype (e.g., `Object.create(null)`) are plain.\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with prototype are plain if they were constructed by a global Object function.\n  const ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof ctor === 'function' && hasOwn.toString.call(ctor) === hasOwn.toString.call(Object);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-plain-object.js","/**\n * Checks if `value` is string.\n *\n * @param {*} value The value to check if is string.\n * @return {Boolean} True if string, else false.\n * @example\n *\n * isString(['a', 'b', 'c', 'd']);\n * // -> false\n *\n * isString(100);\n * // -> false\n *\n * isString('Lorem ipsum dolor sit amet');\n * // -> true\n *\n * isString({ a: 'a', b: 'b' });\n * // -> false\n */\nexport default function isString(value) {\n  return !!value && Object.prototype.toString.call(value) === '[object String]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-string.js","import isPlainObject from './is-plain-object';\nimport isArray from './is-array';\nimport isFunction from './is-function';\nimport isBoolean from './is-boolean';\n\n/**\n * Merge the contents of two or more objects together into the first object.\n *\n * Keep in mind that the target object (first argument) will be modified, and will also be returned from `extend()`.\n * If, however, you want to preserve both of the original objects, you can do so by passing an empty object as the target:\n *\n * `var object = extend({}, object1, object2);`\n *\n * The merge performed by `extend()` is not recursive by default; if a property of the first object\n * is itself an object or array, it will be completely overwritten by a property with the same key\n * in the second or subsequent object. The values are not merged.\n * However, by passing true for the first function argument, objects will be recursively merged.\n *\n * **Warning:** Passing false for the first argument is not supported.\n *\n * Undefined properties are not copied. However, properties inherited from the object's prototype will be copied over.\n * Properties that are an object constructed via new MyCustomObject(args), or built-in JavaScript types such as\n * Date or RegExp, are not re-constructed and will appear as plain Objects in the resulting object or array.\n *\n * On a deep extend, Object and Array are extended, but object wrappers on primitive types such as\n * String, Boolean, and Number are not. Deep-extending a cyclical data structure will result in an error.\n *\n * @function extend\n * @param {Boolean} [deep=false] If true, the merge becomes recursive (aka. deep copy).\n * @param {Object} target An object that will receive the new properties if additional objects are passed.\n * @param {Object} object1 An object containing additional properties to merge in.\n * @param {Object} [objectN] Additional objects containing properties to merge in.\n * @return {Object} The merged object.\n * @example\n *\n * // EXAMPLE 1\n * // Merge two objects, modifying the first.\n * var object1 = {\n *   apple: 0,\n *   banana: {weight: 52, price: 100},\n *   cherry: 97\n * };\n *\n * var object2 = {\n *   banana: {price: 200},\n *   durian: 100\n * };\n *\n * extend(object1, object2);\n * // -> {\"apple\": 0, \"banana\": {\"price\": 200}, \"cherry\": 97, \"durian\": 100}\n *\n * // EXAMPLE 2\n * // Merge two objects recursively, modifying the first.\n * var object1 = {\n *   apple: 0,\n *   banana: {weight: 52, price: 100},\n *   cherry: 97\n * };\n * var object2 = {\n *   banana: {price: 200},\n *   durian: 100\n * };\n *\n * extend(true, object1, object2);\n * // -> {\"apple\": 0, \"banana\": {\"weight\": 52, \"price\": 200}, \"cherry\": 97, \"durian\": 100}\n *\n * // EXAMPLE 3\n * // Merge defaults and options, without modifying the defaults.\n * var defaults = {validate: false, limit: 5, name: \"foo\"};\n * var options = {validate: true, name: \"bar\"};\n *\n * // Merge defaults and options, without modifying defaults\n * var settings = extend({}, defaults, options);\n *\n * // -> defaults -- {\"validate\": false, \"limit\": 5, \"name\": \"foo\"}\n * // -> options -- {\"validate\": true, \"name\": \"bar\"}\n * // -> settings -- {\"validate\": true, \"limit\": 5, \"name\": \"bar\"}\n */\nexport default function extend(...args) {\n  const length = args.length;\n  let options, name, src, copy, copyIsArray, clone;\n  let target = args[0] || {};\n  let i = 1;\n  let deep = false;\n\n  // Handle a deep copy situation\n  if (isBoolean(target)) {\n    deep = target;\n    target = args[1] || {};\n    // skip the boolean and the target\n    i = 2;\n  }\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if (typeof target !== 'object' && !isFunction(target)) {\n    target = {};\n  }\n\n  for (; i < length; i += 1) {\n    // Only deal with non-null/undefined values\n    if ((options = args[i]) != null) {\n      // Extend the base object\n      for (name in options) {\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        if (target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && isArray(src) ? src : [];\n          } else {\n            clone = src && isPlainObject(src) ? src : {};\n          }\n\n          // Never move original objects, clone them\n          target[name] = extend(deep, clone, copy);\n\n        // Don't bring in undefined values\n        } else if (typeof copy !== 'undefined') {\n          target[name] = copy;\n        }\n      }\n    }\n  }\n\n  // Return the modified object\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/extend.js","/**\n * Checks if 'value' is a function.\n *\n * @param {*} value The value to check.\n * @return {Boolean} True if 'value' is a function, else returns false.\n * @example\n *\n * isFunction(function test() {\n *   return 'This is test function.';\n * });\n * // -> true\n *\n * isFunction('This is a test function.');\n * // -> false\n */\nexport default function isFunction(value) {\n  return typeof value === 'function' && Object.prototype.toString.call(value) === '[object Function]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-function.js","/**\n * Checks if 'value' is a boolean value.\n *\n * @param {*} value The value to check.\n * @return {Boolean} True if the 'value' is a boolean value, else false.\n * @example\n *\n * isBoolean(true);\n * // -> true\n *\n * isBoolean(false);\n * // -> true\n *\n * isBoolean({a: 'a'});\n * // -> false\n *\n * isBoolean(null);\n * // -> false\n */\nexport default function isBoolean(value) {\n  return value === true || value === false ||\n    Object.prototype.toString.call(value) === '[object Boolean]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/is-boolean.js"],"sourceRoot":""}